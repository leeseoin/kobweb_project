version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: kob_backend
      POSTGRES_USER: iseoin
      POSTGRES_PASSWORD: 1234
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kobweb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iseoin -d kob_backend"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - kobweb-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./kobweb_back
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kob_backend
      SPRING_DATASOURCE_USERNAME: iseoin
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kobweb-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./kobweb_pront
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://backend:8080/api
      NEXT_PUBLIC_WS_URL: ws://backend:8080/ws
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - kobweb-network
    restart: unless-stopped

  # Nginx Reverse Proxy (선택사항)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - kobweb-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  kobweb-network:
    driver: bridge